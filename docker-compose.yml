version: "3.8"

services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: user_service_development
      MYSQL_USER: user_service
      MYSQL_PASSWORD: user_service_pass
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init_db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network

  mongo:
    image: mongo:latest
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
    networks:
      - app_network

  user-service:
    build:
      context: ./user_service
    container_name: user_service
    restart: always
    stdin_open: true   # - keeps STDIN open so byebug can read your commands
    tty: true 
    depends_on:
      - mysql
    ports:
      - "3000:3000"
    environment:
      RAILS_ENV: development
    volumes:
      - ./user_service:/rails
      - /rails/vendor
    networks:
      - app_network

  ride-service:
    build:
      context: ./ride_service
    container_name: ride_service
    restart: always
    depends_on:
      - mongo
    ports:
      - "8080:8080"
    environment:
      MONGO_URI: mongodb://mongo:27017/ride_service
      JWT_SECRET_KEY: your_jwt_key
    volumes:
      - ./ride_service:/app
    networks:
      - app_network

  web:
    build:
      context: ./web
    container_name: web
    restart: always
    ports:
      - "3001:3000"
    volumes:
      - ./web:/app
      - /app/node_modules
    environment:
      NODE_ENV: development
    command: npm run dev
    networks:
      - app_network
      
  kong:
    image: kong:3.7           # phi√™n b·∫£n OSS m·ªõi nh·∫•t, c√≥ s·∫µn DB-less
    container_name: kong
    restart: always
    depends_on:
      - user-service
      - ride-service
    environment:
      KONG_DATABASE: "off"                   # b·∫≠t DB-less
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
    volumes:
      - ./kong/kong.yml:/kong/kong.yml:ro    # mount file c·∫•u h√¨nh
    ports:
      - "8000:8000"   # c·ªïng proxy ‚Äì client/·ª©ng d·ª•ng Next.js g·ªçi v√†o ƒë√¢y
      - "8001:8001"   # c·ªïng admin ‚Äì b·∫°n g·ª≠i l·ªánh admin API, n·∫øu mu·ªën
    networks:
      - app_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app_network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:29092,INTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,INTERNAL://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./create-topics.sh:/create-topics.sh
    command: ["/bin/bash", "-c", "/etc/confluent/docker/run & sleep 10 && bash /create-topics.sh && wait"]
    networks:
      - app_network

  matching-service:
    build:
      context: ./matching_service
    container_name: matching_service
    restart: always
    depends_on:
      - kafka
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERS: kafka:9092
    volumes:
      - ./matching_service:/app
    networks:
      - app_network
    stdin_open: true
    tty: true

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app_network

  ws-gateway:
    build:
      context: ./ws_gateway
    container_name: ws_gateway
    restart: always
    ports:
      - "7000:8000"
    volumes:
      - ./ws_gateway:/app   # üí• Mount source code t·ª´ host v√†o /app trong container
    depends_on:
      - redis
    networks:
      - app_network


volumes:
  mysql_data:
  mongo_data:
  mongo_config:

networks:
  app_network:
    driver: bridge
